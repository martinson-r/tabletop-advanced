#!/usr/bin/env node

const { port, db } = require('../config');
const { uri } = db;
const app = require('../app');
const mongoose = require('mongoose');
const { createServer } = require('http');
const { SubscriptionServer } = require('subscriptions-transport-ws');
const { execute, subscribe } = require('graphql');
const { makeExecutableSchema } = require('graphql-tools')
const typeDefs = require('../graphql/typedefs');
const resolvers = require('../graphql/resolvers');
const schema = makeExecutableSchema({
   typeDefs,
   resolvers
});

//old socket.io implementation
//const io = require('../routes/sockets');

//Connect to database
try {
    mongoose.connect(`${uri}`, { useNewUrlParser: true, useUnifiedTopology: true, useFindAndModify: false });
} catch(e) {
    console.log(e)
}

let database = mongoose.connection;

//check database connection
database.once('open', function() {
    console.log('Connected to MongoDB!');
 });

//check for database errors
database.on('error', function(err) {
    console.log(err);
});

const ws = createServer(app);
ws.listen(port, () => {
  console.log(`Apollo Server is now running on http://localhost:${port}`);
  // Set up the WebSocket for handling GraphQL subscriptions
  new SubscriptionServer({execute, subscribe, schema}, {
    server: ws,
    path: '/subscriptions',
  });
});
