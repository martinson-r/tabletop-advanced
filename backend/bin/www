#!/usr/bin/env node

const { port } = require('../config');
const db = require('../db/models');
const app = require('../app');
const mongoose = require('mongoose');
const { createServer } = require('http');
const { SubscriptionServer } = require('subscriptions-transport-ws');
const { execute, subscribe } = require('graphql');
const { makeExecutableSchema } = require('graphql-tools')
const typeDefs = require('../graphql/typedefs');
const resolvers = require('../graphql/resolvers');

//makeExecutableSchema circumvents issues with Apollo GraphQL Client not recognizing Schema
const schema = makeExecutableSchema({
   typeDefs,
   resolvers
});

// Check the database connection before starting the app
db.sequelize
  .authenticate()
  .then(() => {
    console.log('Database connection success! Sequelize is ready to use...')
  })
  .catch((err) => {
      console.log('Database connection failure.');
      console.error(err);
});

const ws = createServer(app);
ws.listen(port, () => {
  console.log(`Apollo Server is now running on http://localhost:${port}`);
  // Set up the WebSocket for handling GraphQL subscriptions
  new SubscriptionServer({execute, subscribe, schema}, {
    server: ws,
    path: '/subscriptions',
  });
});
